'use client'

import { IncidentFormFooter } from '@/app/[locale]/incident/components/IncidentFormFooter'
import { useTranslations } from 'next-intl'
import { Divider } from '@/components/ui/Divider'
import React, { ReactNode, useEffect, useState } from 'react'
import { signalsClient } from '@/services/client/api-client'
import { stepToPath, usePathname, useRouter } from '@/routing/navigation'
import { postAttachments } from '@/services/attachment/attachments'
import { useFormStore } from '@/store/form_store'
import { _NestedLocationModel } from '@/services/client'
import { Paragraph, Heading } from '@/components/index'
import PreviewFile from '@/components/ui/upload/PreviewFile'
import { SubmitAlert } from '@/app/[locale]/incident/summary/components/SubmitAlert'
import { NextLinkWrapper } from '@/components/ui/NextLinkWrapper'
import { FormStep } from '@/types/form'
import { LocationMap } from '@/components/ui/LocationMap'
import { getCurrentStep } from '@/lib/utils/stepper'
import { getAttachments } from '@/lib/utils/attachments'
import { useConfig } from '@/hooks/useConfig'
import { ParagraphOrList } from '@/components/ui/ParagraphOrList'

const IncidentSummaryForm = () => {
  const t = useTranslations('describe_summary')
  const tStepReport = useTranslations('describe_report')
  const tStepAdd = useTranslations('describe_add')
  const tStepContact = useTranslations('describe_contact')
  const { updateForm, formState } = useFormStore()
  const router = useRouter()
  const [error, setError] = useState<boolean>(false)
  const [loading, setLoading] = useState<boolean>(false)
  const [files, setFiles] = useState<File[]>([])
  const pathname = usePathname()
  const step = getCurrentStep(pathname)
  const { config } = useConfig()

  useEffect(() => {
    router.prefetch('/incident/thankyou')
  }, [router])

  useEffect(() => {
    setFiles(getAttachments(formState.attachments))
  }, [])

  /**
   * We decided to use `@ts-ignore` here because our client is generated by typescript-openapi-gen.
   * The `v1PublicSignalsCreate` method expects a large number of fields according to the TypeScript
   * definition, but many of these fields are not actually required for the API call to succeed.
   *
   * By using `@ts-ignore`, we can bypass TypeScript's type-checking errors for this case, while still
   * allowing the API call to function correctly. This prevents unnecessary complexity in aligning the
   * generated types with the real API requirements.
   */
  const handleSignalSubmit = async () => {
    setError(false)
    setLoading(true)

    try {
      const res = await signalsClient.v1.v1PublicSignalsCreate({
        text: formState.description,
        // @ts-ignore
        location: {
          geometrie: {
            type: _NestedLocationModel.type.POINT,
            coordinates: [formState.coordinates[1], formState.coordinates[0]],
          },
          address: formState.address,
        },
        // @ts-ignore
        category: {
          sub_category:
            process.env.NEXT_PUBLIC_BASE_URL_API +
            `/signals/v1/public/terms/categories/${formState.main_category}/sub_categories/${formState.sub_category}`,
        },
        /* TODO: check if allows_contact needs to be set */
        reporter: {
          email: formState.email,
          phone: formState.phone,
          sharing_allowed: formState.sharing_allowed,
          allows_contact: false,
        },
        incident_date_start: new Date().toISOString(),
        extra_properties: formState.extra_properties,
      })

      // Set SIG number
      updateForm({
        ...formState,
        sig_number: res.id_display,
        last_completed_step: Math.max(formState.last_completed_step, step),
      })

      if (formState.attachments.length > 0) {
        const signalId = res.signal_id
        if (signalId) {
          try {
            await Promise.all(
              formState.attachments.map(async (attachment) => {
                const formData = new FormData()
                formData.append('signal_id', signalId)
                formData.append('file', attachment)
                return postAttachments(signalId, formData)
              })
            )
          } catch (e) {
            // Note: the report does not have fail when one or more of the attachments is not uploaded successfully.
            console.error('One of the attachments failed while uploading', e)
          }
        }
      }
      router.push(stepToPath[FormStep.STEP_5_THANK_YOU])
    } catch (err) {
      console.error(err)
      setError(true)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="flex flex-col gap-8">
      <Paragraph appearance="lead">{t('description')}</Paragraph>

      <Divider />

      <div className="summary-grid">
        <div className="summary-grid__heading">
          <Heading level={2}>1. {tStepReport('heading')}</Heading>
        </div>
        <div className="summary-grid__main">
          <IncidentSummaryFormItem
            title={tStepReport('form.describe_textarea_heading')}
            value={formState.description}
          />
          {files.length > 0 && (
            <IncidentSummaryFormAttachments
              title={tStepReport('form.describe_upload_heading')}
              attachments={files}
            />
          )}
        </div>
        <div className="summary-grid__link">
          <NextLinkWrapper href={stepToPath[FormStep.STEP_1_DESCRIPTION]}>
            {t('edit_step_report')}
          </NextLinkWrapper>
        </div>
      </div>

      <Divider />

      <div className="summary-grid">
        <div className="sumary-grid__heading">
          <Heading level={2}>2. {tStepAdd('heading')}</Heading>
        </div>

        <div className="summary-grid__main flex flex-col gap-4">
          <IncidentSummaryFormItem
            title={tStepAdd('form.add_map_heading')}
            value={formState.address?.weergave_naam}
          >
            <div
              style={{ minHeight: 200, height: 200 }}
              role="img"
              aria-label=""
            >
              <LocationMap />
            </div>
          </IncidentSummaryFormItem>

          {formState.extra_properties.map((answer) => {
            return (
              <IncidentSummaryFormItem
                title={answer.label}
                key={answer.id}
                value={
                  typeof answer.answer === 'string' ? (
                    answer.answer
                  ) : Array.isArray(answer.answer) ? (
                    <ParagraphOrList
                      entries={answer.answer
                        .filter(
                          (singleAnswer) =>
                            singleAnswer !== false && singleAnswer !== 'empty'
                        )
                        .map((singleAnswer, index) => [
                          singleAnswer.id || index,
                          singleAnswer.label,
                        ])}
                    />
                  ) : (
                    answer.answer.label
                  )
                }
              />
            )
          })}
        </div>

        <div className="summary-grid__link">
          <NextLinkWrapper href={stepToPath[FormStep.STEP_2_ADD]}>
            {t('edit_step_add')}
          </NextLinkWrapper>
        </div>
      </div>

      <Divider />

      <div className="summary-grid">
        <div className="summary-grid__heading">
          <Heading level={2}>{tStepContact('heading')}</Heading>
        </div>
        <div className="summary-grid__main flex flex-col gap-4">
          {!formState.phone &&
          !formState.email &&
          !formState.sharing_allowed ? (
            <Paragraph>{tStepContact('form.no_contact_details')}</Paragraph>
          ) : (
            <>
              {formState.phone && (
                <IncidentSummaryFormItem
                  title={tStepContact('form.describe_phone_input_heading')}
                  value={formState.phone}
                />
              )}
              {formState.email && (
                <IncidentSummaryFormItem
                  title={tStepContact('form.describe_mail_input_heading')}
                  value={formState.email}
                />
              )}
              {formState.sharing_allowed && (
                <IncidentSummaryFormItem
                  title={tStepContact('form.sharing_heading_short')}
                  value={tStepContact(
                    'form.describe_checkbox_input_description',
                    { organization: config?.base.municipality_display_name }
                  )}
                />
              )}
            </>
          )}
        </div>

        <div className="summary-grid__link">
          <NextLinkWrapper href={stepToPath[FormStep.STEP_3_CONTACT]}>
            {t('edit_step_contact')}
          </NextLinkWrapper>
        </div>
      </div>

      <SubmitAlert error={error} loading={loading} />

      <IncidentFormFooter
        handleSignalSubmit={handleSignalSubmit}
        ariaDescribedById="submit-described-by"
        loading={loading}
      />
    </div>
  )
}

export const IncidentSummaryFormItem = ({
  title,
  value = '',
  children,
}: {
  title: string
  value: ReactNode | null | undefined
  children?: ReactNode
}) => {
  return (
    <div className="flex flex-col gap-1">
      {title !== '' && <Heading level={3}>{title}</Heading>}
      {children && <div className="mt-2">{children}</div>}
      {value !== '' && <Paragraph>{value}</Paragraph>}
    </div>
  )
}

const IncidentSummaryFormAttachments = ({
  title,
  attachments = [],
}: {
  title: string
  attachments: File[]
}) => {
  return (
    <div className="flex flex-col gap-2">
      {title !== '' && <Heading level={3}>{title}</Heading>}
      <div className="flex gap-4 flex-wrap">
        {attachments.map((image, index) => (
          <PreviewFile file={image} key={index} />
        ))}
      </div>
    </div>
  )
}

export { IncidentSummaryForm }
