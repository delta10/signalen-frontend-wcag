'use client'

import { IncidentFormFooter } from '@/app/[locale]/incident/components/IncidentFormFooter'
import { useTranslations } from 'next-intl'
import { Divider } from '@/components/ui/Divider'
import { useStepperStore } from '@/store/stepper_store'
import React, { useEffect, useState } from 'react'
import { signalsClient } from '@/services/client/api-client'
import { useRouter } from '@/routing/navigation'
import { postAttachments } from '@/services/attachment/attachments'
import { useFormStore } from '@/store/form_store'
import { _NestedLocationModel } from '@/services/client'
import { Paragraph, Heading } from '@/components/index'
import PreviewFile from '@/components/ui/upload/PreviewFile'
import { SubmitAlert } from '@/app/[locale]/incident/summary/components/SubmitAlert'
import { NextLinkWrapper } from '@/components/ui/NextLinkWrapper'

const IncidentSummaryForm = () => {
  const t = useTranslations('describe-summary')
  const { formState } = useFormStore()
  const { goToStep } = useStepperStore()
  const router = useRouter()
  const [error, setError] = useState<boolean>(false)
  const [loading, setLoading] = useState<boolean>(false)

  useEffect(() => {
    router.prefetch('/incident/thankyou')
  }, [router])

  /**
   * We decided to use `@ts-ignore` here because our client is generated by typescript-openapi-gen.
   * The `v1PublicSignalsCreate` method expects a large number of fields according to the TypeScript
   * definition, but many of these fields are not actually required for the API call to succeed.
   *
   * By using `@ts-ignore`, we can bypass TypeScript's type-checking errors for this case, while still
   * allowing the API call to function correctly. This prevents unnecessary complexity in aligning the
   * generated types with the real API requirements.
   */
  const handleSignalSubmit = async () => {
    setError(false)
    setLoading(true)

    try {
      const res = await signalsClient.v1.v1PublicSignalsCreate({
        text: formState.description,
        // @ts-ignore
        location: {
          geometrie: {
            type: _NestedLocationModel.type.POINT,
            coordinates: formState.coordinates,
          },
        },
        // @ts-ignore
        category: {
          sub_category:
            process.env.NEXT_PUBLIC_BASE_URL_API +
            `/signals/v1/public/terms/categories/${formState.main_category}/sub_categories/${formState.sub_category}`,
        },
        /* TODO: check if allows_contact needs to be set */
        reporter: {
          email: formState.email,
          phone: formState.phone,
          sharing_allowed: formState.sharing_allowed,
          allows_contact: false,
        },
        incident_date_start: new Date().toISOString(),
        extra_properties: formState.extra_properties,
      })

      if (formState.attachments.length > 0) {
        const signalId = res.signal_id
        if (signalId) {
          try {
            await Promise.all(
              formState.attachments.map(async (attachment) => {
                const formData = new FormData()
                formData.append('signal_id', signalId)
                formData.append('file', attachment)
                return postAttachments(signalId, formData)
              })
            )
          } catch (e) {
            // Note: the report does not have fail when one or more of the attachments is not uploaded successfully.
            console.error('One of the attachments failed while uploading', e)
          }
        }
      }

      router.push('/incident/thankyou')
    } catch (err) {
      console.error(err)
      setError(true)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="flex flex-col gap-8">
      <Paragraph appearance="lead">{t('description')}</Paragraph>
      <Divider />
      <div className="flex flex-col gap-4">
        <div className="flex flex-col gap-1 md:flex-row justify-between">
          <Heading level={2}>{t('steps.step_one.title')}</Heading>
          <NextLinkWrapper href={'/incident'} onClick={() => goToStep(1)}>
            {t('steps.step_one.edit')}
          </NextLinkWrapper>
        </div>
        <IncidentSummaryFormItem
          title={t('steps.step_one.input_heading')}
          value={formState.description}
        />
        {formState.attachments?.length > 0 && (
          <IncidentSummaryFormAttachments
            title={t('steps.step_one.upload_images')}
            attachments={formState.attachments}
          />
        )}
      </div>
      <Divider />
      <div className="flex flex-col gap-4">
        <div className="flex flex-col gap-1 md:flex-row justify-between">
          <Heading level={2}>{t('steps.step_two.title')}</Heading>
          <NextLinkWrapper href={'/incident/add'} onClick={() => goToStep(2)}>
            {t('steps.step_two.edit')}
          </NextLinkWrapper>
        </div>
        {/* TODO: AssetSelect en LocationSelect hier tonen, indien een / beide zijn ingevuld */}
        {formState.extra_properties.map((answer) => {
          return (
            <IncidentSummaryFormItem
              title={answer.label}
              key={answer.id}
              value={
                typeof answer.answer === 'string'
                  ? answer.answer
                  : Array.isArray(answer.answer)
                    ? answer.answer
                        .filter(
                          (singleAnswer) =>
                            singleAnswer !== false && singleAnswer !== 'empty'
                        )
                        .map((singleAnswer) => singleAnswer.label)
                        .join(', ')
                    : answer.answer.label
              }
            />
          )
        })}
      </div>
      <Divider />
      <div className="flex flex-col gap-4">
        <div className="flex flex-col gap-1 md:flex-row justify-between">
          <Heading level={2}>{t('steps.step_three.title')}</Heading>
          <NextLinkWrapper
            href={'/incident/contact'}
            onClick={() => goToStep(3)}
          >
            {t('steps.step_three.edit')}
          </NextLinkWrapper>
        </div>
        {formState.phone === '' ||
        (formState.phone === undefined && formState.email === '') ||
        (formState.email === undefined &&
          formState.sharing_allowed === false) ? (
          <Paragraph>{t('steps.step_three.no_contact_details')}</Paragraph>
        ) : (
          <>
            {formState.phone !== undefined && formState.phone !== null ? (
              <IncidentSummaryFormItem
                title={t('steps.step_three.input_telephone_heading')}
                value={formState.phone}
              />
            ) : null}
            {formState.email !== undefined && formState.email !== null ? (
              <IncidentSummaryFormItem
                title={t('steps.step_three.input_mail_heading')}
                value={formState.email}
              />
            ) : null}
            {formState.sharing_allowed ? (
              <IncidentSummaryFormItem
                title={t('steps.step_three.input_sharing_heading')}
                value={t('steps.step_three.input_sharing_allowed')}
              />
            ) : null}
          </>
        )}
      </div>

      <SubmitAlert error={error} loading={loading} />

      <IncidentFormFooter
        handleSignalSubmit={handleSignalSubmit}
        ariaDescribedById="submit-described-by"
        loading={loading}
      />
    </div>
  )
}

export const IncidentSummaryFormItem = ({
  title,
  value = '',
  children,
}: {
  title: string
  value?: string
  children?: React.ReactElement
}) => {
  return (
    <div className="flex flex-col gap-1">
      {value !== '' && <Heading level={3}>{title}</Heading>}
      {value !== '' ? (
        <Paragraph>{value}</Paragraph>
      ) : (
        <div className="mt-2">{children}</div>
      )}
    </div>
  )
}

const IncidentSummaryFormAttachments = ({
  title,
  attachments = [],
}: {
  title: string
  attachments: File[]
}) => {
  return (
    <div className="flex flex-col gap-2">
      <p className="font-semibold">{title}</p>
      <div className="flex gap-4 flex-wrap">
        {attachments.map((image, index) => (
          <PreviewFile file={image} key={index} />
        ))}
      </div>
    </div>
  )
}

export { IncidentSummaryForm }
